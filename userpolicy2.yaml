apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: backstage
  name: catalog-viewer
rules:
- apiGroups: ["catalog.backstage.io"]
  resources: ["entities"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: backstage
  name: catalog-viewer-binding
subjects:
- kind: Group
  name: BU1
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: BU2
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: BU3
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: BU4
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: catalog-viewer
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: backstage.io/v1alpha1
kind: Policy
metadata:
  name: demo-policy
spec:
  policy: |
    import { PermissionPolicy, PolicyAuthorizeQuery, PolicyDecision } from '@backstage/plugin-permission-common';
    import { BackstageIdentityResponse } from '@backstage/plugin-auth-backend';
    import { createCatalogPolicyDecision, catalogConditions } from '@backstage/plugin-catalog-backend';

    class DemoPolicy implements PermissionPolicy {
        constructor(
            private readonly componentPermissions: Map<string, string[]>,
            private readonly groupPermissions: Map<string, string[]>
        ) {}

        async handle(
            request: PolicyAuthorizeQuery,
            user?: BackstageIdentityResponse
        ): Promise<PolicyDecision> {
            if (request.permission.name === 'catalog.entity.view') {
                const userGroups = user?.groups ?? [];
                for (const group of userGroups) {
                    if (this.groupPermissions.has(group)) {
                        const allowedComponents = this.groupPermissions.get(group) ?? [];
                        if (allowedComponents.includes(request.entity.kind)) {
                            return { result: 'ALLOW' };
                        }
                    }
                }
            }
            return { result: 'DENY' };
        }
    }
